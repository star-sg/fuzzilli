diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index 76b54329579..d5f3ce70165 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -17,6 +17,7 @@
 #include <unordered_map>
 #include <utility>
 #include <vector>
+#include "src/objects/casting.h"
 
 #ifdef ENABLE_VTUNE_JIT_INTERFACE
 #include "src/third_party/vtune/v8-vtune.h"
@@ -3629,6 +3630,27 @@ void Shell::NodeTypeCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
   DCHECK(i::ValidateCallbackInfo(info));
   v8::Isolate* isolate = info.GetIsolate();
 
+  internal::PrintFunctionCallbackInfo((void*)&info);
+
+  auto receiver  = v8::Local<v8::internal::JSReceiver>::Cast(v8::Local<v8::internal::HeapObject>::Cast(info.This()));
+  auto templ  = v8::Local<v8::internal::FunctionTemplateInfo>::Cast(v8::Local<v8::internal::HeapObject>::Cast(info.Data()));
+
+  internal::Tagged<internal::Object> recv_type = templ->signature();
+  if (!internal::IsFunctionTemplateInfo(recv_type)) DCHECK(!receiver.IsEmpty());
+  DCHECK(internal::IsJSObject(receiver->GetHeapObject()));
+
+  internal::Tagged<internal::JSObject> js_obj_receiver = internal::Cast<internal::JSObject>(receiver->GetHeapObject());
+  internal::Tagged<internal::FunctionTemplateInfo> signature =
+      internal::Cast<internal::FunctionTemplateInfo>(recv_type);
+
+  if (signature->IsTemplateFor(js_obj_receiver)) DCHECK(!receiver.IsEmpty());
+
+  DCHECK(V8_UNLIKELY(IsJSGlobalProxy(js_obj_receiver)));
+  internal::Tagged<internal::HeapObject> prototype = js_obj_receiver->map()->prototype();
+  DCHECK(!prototype.is_null());
+  internal::Tagged<internal::JSObject> js_obj_prototype = internal::Cast<internal::JSObject>(prototype);
+  if (signature->IsTemplateFor(js_obj_prototype)) DCHECK(!js_obj_prototype.is_null());
+
   info.GetReturnValue().Set(v8::Number::New(isolate, 1));
 }
 
