diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index d8d939d6f93..2312b70df9c 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -3514,6 +3514,26 @@ void Shell::NodeTypeCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
   DCHECK(i::ValidateCallbackInfo(info));
   v8::Isolate* isolate = info.GetIsolate();
 
+  internal::PrintFunctionCallbackInfo((void*)&info);
+
+  auto receiver  = v8::Local<v8::internal::JSReceiver>::Cast(info.This());
+
+  auto implicit_args = static_cast<v8::internal::Address *>(*(unsigned long **)&info);
+  auto target_ptr = static_cast<v8::internal::Address *>((unsigned long *)(implicit_args + 4));
+  auto target = internal::Handle<internal::Object>(target_ptr);
+  auto templ = internal::Cast<internal::FunctionTemplateInfo>(target);
+
+  internal::Tagged<internal::Object> recv_type = templ->signature();
+  if (!internal::IsFunctionTemplateInfo(recv_type)) DCHECK(!receiver.IsEmpty());
+  DCHECK(internal::IsJSObject(receiver->GetHeapObject()));
+
+  internal::Tagged<internal::JSObject> js_obj_receiver = internal::Cast<internal::JSObject>(receiver->GetHeapObject());
+  internal::Tagged<internal::FunctionTemplateInfo> signature =
+      internal::Cast<internal::FunctionTemplateInfo>(recv_type);
+
+  DCHECK(signature->IsTemplateFor(js_obj_receiver));
+  DCHECK(!receiver.IsEmpty());
+
   info.GetReturnValue().Set(v8::Number::New(isolate, 1));
 }
 
